#!/bin/bash -xe

# Log all this script's output to user-data.log
exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

# Update packages
sudo apt update -y
sudo apt upgrade -y

# Install AWS CLI
mkdir -p /opt/custom
cd /opt/custom
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
sudo apt install -y unzip
unzip awscliv2.zip
./aws/install --update

# Format and mount secondary drive
echo 'type=83' | sudo sfdisk /dev/nvme1n1
sudo mkfs.xfs /dev/nvme1n1p1
sudo mkdir -p /var/www
sudo mount /dev/nvme1n1p1 /var/www
sudo cp -p /etc/fstab{,.bak}
echo "/dev/nvme1n1p1 /var/www xfs defaults 0 0" | sudo tee -a /etc/fstab

# Format and mount tertiary drive
echo 'type=83' | sudo sfdisk /dev/nvme2n1
sudo mkfs.xfs /dev/nvme2n1p1
sudo mkdir -p /backup
sudo mount /dev/nvme2n1p1 /backup
sudo cp -p /etc/fstab{,.bak}
echo "/dev/nvme2n1p1 /backup xfs defaults 0 0" | sudo tee -a /etc/fstab

# Create and configure secondary user
sudo useradd ${ghost_user} -m -s /bin/bash
sudo usermod -aG sudo ${ghost_user}

# Create SSH identity for secondary user
sudo su - ${ghost_user}
mkdir -p /home/${ghost_user}/.ssh
ssh-keygen -t ed25519 -f /home/${ghost_user}/.ssh/${ghost_user}-key -N ""
cat /home/${ghost_user}/.ssh/${ghost_user}-key.pub >> /home/${ghost_user}/.ssh/authorized_keys
chmod 700 /home/${ghost_user}/.ssh
chmod 600 /home/${ghost_user}/.ssh/authorized_keys
chmod 400 /home/${ghost_user}/.ssh/${ghost_user}-key
chmod 400 /home/${ghost_user}/.ssh/${ghost_user}-key.pub
chown -R ${ghost_user}:${ghost_user} /home/${ghost_user}/.ssh

# Save the secondary user's public and private keys in SSM Parameter Store
sudo /usr/local/bin/aws ssm put-parameter --name "/${project_name}/${ghost_user}-key-public" --value file://home/${ghost_user}/.ssh/${ghost_user}-key.pub --type SecureString --overwrite
sudo /usr/local/bin/aws ssm put-parameter --name "/${project_name}/${ghost_user}-key-private" --value file://home/${ghost_user}/.ssh/${ghost_user}-key --type SecureString --overwrite

# Create /backup/exclude.txt
cat > /backup/exclude.txt << EOF
*.bz
*.bz2
*.bzip
*.bzip2
*.gz
*.gzip
*.log
*_log
*.sock
*.socket
*.tar
*.zip
*sess_*
EOF

# Create cron job that creates a backup of the database and saves a snapshot of the production site under `/backup` directory and email a summary every day at midnight
sudo crontab -l > mycron
echo "0 0 * * * sudo -u ${ghost_user} ghost backup --db mysql --db-user root --db-pass ${mysql_password} --db-host localhost --db-port 3306 --db-name ${db_name} --backup-dir /backup --backup-name ghost-backup-$(date +%Y-%m-%d) --backup-gzip --backup-email ${ghost_email}" | sudo tee -a mycron
#echo "0 0 * * * /usr/bin/mysqldump -u root -p${mysql_password} ${db_name} > /backup/${db_name}-$(date +%Y-%m-%d).sql" | sudo tee -a mycron
#echo "0 0 * * * /usr/bin/rsync -avz --exclude-from=/backup/exclude.txt /var/www/ghost/ /backup/$(date +%Y-%m-%d)/ghost" | sudo tee -a mycron
sudo crontab mycron
sudo rm -f mycron

# Configure and activate the firewall
sudo ufw allow 'OpenSSH'
sudo ufw allow 'Nginx Full'
yes | sudo ufw enable

# Install NGINX and MySQL
sudo apt install -y nginx mysql-server
sudo systemctl enable --now nginx
sudo systemctl enable --now mysql

# Set MySQL password
sudo mysql -u root -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '${mysql_password}';"

# Switch to ubuntu user
sudo su - ubuntu

# Add the NodeSource APT repository for Node 16
curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash

# Install Node.js and development tools in case it's needed to build native addons
sudo apt install -y nodejs gcc g++ make

# Install Ghost-CLI
sudo npm install ghost-cli@latest --location=global

# Create directory for Ghost installation
sudo mkdir -p /var/www/ghost

# Set directory ownership to ${ghost_user} user
sudo chown ${ghost_user}:${ghost_user} /var/www/ghost

# Set the correct permissions
sudo chmod 775 /var/www/ghost

# Move into the Ghost directory
cd /var/www/ghost

# Install Ghost
# ghost install --db mysql --db-user root --db-pass ${mysql_password} --db-host localhost --db-port 3306 --db-name ${db_name} --admin-user ${ghost_user} --admin-password ${ghost_password} --admin-email ${ghost_email} --url ${ghost_url} --no-prompt

# Reboot the system
# sudo reboot

echo "All went well" >> ~/all_went_well.txt
